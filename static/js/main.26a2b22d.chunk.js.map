{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","robots","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAceA,EAZF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAAMQ,GAAhC,cACrBP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,UCQXC,EAdE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OAEf,OACAZ,EAAAC,EAAAC,cAAA,WAEQU,EAAOC,IAAK,SAACC,EAAKC,GACd,OACIf,EAAAC,EAAAC,cAACc,EAAD,CAAOC,IAAKF,EAAGR,GAAIK,EAAOG,GAAGR,GAAIC,KAAMI,EAAOG,GAAGP,KAAMC,MAAOG,EAAOG,GAAGN,YCC7ES,EARG,SAAAP,GAAmCA,EAAhCQ,YAAgC,IAAnBC,EAAmBT,EAAnBS,aAC9B,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCkB,KAAK,SAASC,YAAY,gBAAiBC,SAAUH,MCKtGI,SARA,SAACzB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAMuB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjE7B,EAAM8B,YC2CJC,cAtCb,SAAAA,EAAY/B,GAAM,IAAAgC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnC,KAcRuC,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAACrB,YAAcoB,EAAME,OAAOC,SAd1CX,EAAKY,MAAM,CACT/B,OAAS,GACTO,YAAc,IAJAY,mFAQE,IAAAa,EAAAV,KAClBW,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAUL,EAAKJ,SAAS,CAAE5B,OAAQqC,uCAQpC,IAAAC,EAAAhB,KAEAiB,EAAejB,KAAKS,MAAM/B,OAAOwC,OAAO,SAAAxC,GAC5C,OAAOA,EAAOJ,KAAK6C,cAAcC,SAASJ,EAAKP,MAAMxB,YAAYkC,iBAGnE,OACIrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWnC,aAAcc,KAAKI,iBAC9BtC,EAAAC,EAAAC,cAACsD,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAD,CAAU7C,OAAQuC,aAjCXO,aCKCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OACPjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,KAAK,SAAA0B,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME","file":"static/js/main.26a2b22d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className=\"bg-light-green dib pr3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200X200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport  Card from './Card';\r\nconst CardList = ({robots}) => {\r\n\r\n    return(\r\n    <div>\r\n         {\r\n            robots.map( (user,i) => {\r\n                return(\r\n                    <Card  key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n                );\r\n            })\r\n        }\r\n     </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield ,searchChange }) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\"  onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div  style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}} >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React,{ Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox.js';\nimport './App.css';\nimport Scroll from '../Components/Scroll.js'\n\n\nclass App  extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state={\n      robots : [],\n      searchfield : ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n\n  onSearchChange = (event) => {\n    this.setState({searchfield : event.target.value })\n  }\n\n  render(){\n\n    const filteredRobots=this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n\n    return(\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}